import sys
sys.stdin=open("input.txt", "r")

n = int(input())
g_list = list(map(int, input().split()))
total_sum = sum(g_list) # 추의 무게의 총함

1. 시작 정점 자신을 제외한 모든 정점까지의 거리를 무한대로 초기화한다.
2. 시작 정점을 priority queue에 삽입한다
3. 우선순위 큐에서 정점 하나를 꺼낸 후, 해당 정점에서 갈 수 있는 모든 인접한 정점들을 확인한다.
    3-1. 인접 정점까지의 거리가 이미 기록된 해당 정점까지의 거리보다 더 짧으면 거리 값을 갱신한다.
    3-2. 이미 기록된 인접 정점까지의 거리가 더 짧다면 넘어간다.
4. 3-1에서 거리 값이 갱신된 정점들을 우선순위 큐에 삽입한다.
5. 우선순위 큐에 더 이상 정점이 없을 때까지 3~4번을 반복한다. 

필요한 자료구조 (2) 
- 시작 정점부터 다른 정점까지의 거리를 기록하는 리스트
- 가장 가까운 정점을 꺼내올 수 있는 우선순위 큐 
(지금까지 발견된 가장 가까운 거리의 정점에 대해서 먼저 계산할 수 있도록 우선순위 큐에 인접 정점들을 저장하고, 
가장 가까운 정점부터 큐에서 꺼내면서 미리 거리를 갱신해놓으면 그보다 더 먼 거리의 경로에 대해서는 더 이상 고려할 필요가 없어진다)

-> 매번 선형탐색 해야하기 때문에 시간복잡도가 N^2가 나옴
- 우선순위 큐(heapq) 사용
- 다익스트라에서 우선순위 큐를 언제 쓰는가? 단계마다 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택할때 사용
